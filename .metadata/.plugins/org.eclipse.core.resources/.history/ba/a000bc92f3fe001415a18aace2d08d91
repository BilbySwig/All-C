import java.awt.Color;
import java.awt.Graphics2D;
import java.util.ArrayList;


public class MyFractalPanel extends FractalPanel{
	//INHERITED THIS FROM DAD: don't uncomment these!
	//protected Graphics2D myGraphics;	<<--- Your crayon
	//protected int totalLevels; <<---how many levels you need to draw
	//protected Color bgColor = Color.WHITE;
	private ArrayList<Color> colorscheme;
	public static void main(String[] args) {
		new FractalFrame( new MyFractalPanel());
	}
	
	public void getStarted(int numLevels){
		//the image is cleared (set to blank & white)
		super.getStarted(numLevels);
		/********************************************************
		 * 	Place the FIRST call to recursive drawing function here!!
		/********************************************************/
		RandomColorScheme();
		Coordinate[] corners=new Coordinate[2]; 
		corners[0]=new Coordinate(300,800);
		corners[1]=new Coordinate(450,800);//two points that the squares will sprout off of
		recur(0, corners[0],corners[1]);//recursive call
	}//end getStarted
	
	/*Preconditions:
	 * 	g is the graphics object for the bufferedImage to which the fractal will be drawn
	 * 
	 *Postconditions: Part of the current level is drawn, and recurvsive calls are executed
	 *      that will draw the next level of the fractal 
	 */
	//private void recursiveDraw(Graphics2D g, Color c, int num, int x, int y, int sz){
	private void recur(int levelsDrawn, Coordinate botleft, Coordinate botright){
		pause(30.0/totalLevels, levelsDrawn);
		if(levelsDrawn>=totalLevels)//stopping state when enough levels are drawn
			return;
		
		Coordinate topright=new Coordinate(botleft);//2 new coordinates to make a square
		Coordinate topleft=new Coordinate(botright);
		topright.rotateAround(botright,-Math.PI/2);//rotating coordinates to right place, no scaling because its a square
		topleft.rotateAround(botleft,Math.PI/2);
		Coordinate[] corners={botleft,botright,topright,topleft};//array of coordinates to fill square made by the coordinates
		EZPolygon poly=new EZPolygon(corners);//new EZPolygon made by the 4 points
		poly.draw(myGraphics, colorscheme.get(levelsDrawn%colorscheme.size()),colorscheme.get(levelsDrawn%colorscheme.size()),1,false,false);//square is drawn with different color for each level
		
		Coordinate tri= new Coordinate(topleft);//new point to make triangle
		tri.rotateAndScale(topright, -Math.PI/6, Math.sqrt(3)/2);//point is rotated and scaled to make a 30-60-90 right triangle with the "top" of the square 
		Coordinate[] triangle={topright,topleft,tri};//trangle point and top points of square in an array to become and EZPolytgon
		poly=new EZPolygon(triangle);//tri and top of square become an EZPolygon, poly is recycled
		poly.draw(myGraphics, colorscheme.get((levelsDrawn+2)%colorscheme.size()),colorscheme.get(levelsDrawn%colorscheme.size()),1,false,false);//triangle is drawn with different color for each level
		
		recur(levelsDrawn+1,tri,topright);//recursive calls, one for each leg of the triangle
		recur(levelsDrawn+1,topleft,tri);
	}//end recur function
	
	/*Preconditions: none
	 *Postconditions: a new color scheme is created in the form of the ArrayList colorscheme 
	 */
	private void RandomColorScheme(){
		colorscheme=new ArrayList<Color>();//ArrayList to be filled with colors
		int r=(int)(Math.random()*256), g=(int)(Math.random()*256), b=(int)(Math.random()*256);//original numbers for color values
		int rchange=(int)(Math.random()*21), gchange=(int)(Math.random()*21), bchange=(int)(Math.random()*21);//increments of change for r, g, and b
		for(int i=0;i<=256;i++){//loop to create bunches and bunches of colors
			colorscheme.add(new Color(r,g,b));//new color based on r, g, and b values
			r=(r+rchange)%255;//r,g,and b change
			g=(g+gchange)%255;
			b=(b+bchange)%255;
		}
			
	
	
	
	}
}
